#include <stdarg.h>
#include <unistd.h>
#include "main.h"

/**
 * _printf - Print formatted output to stdout
 * @format: Format string containing format specifiers
 * @...: Variable number of arguments
 *
 * Return: Number of characters printed (excluding the null byte)
 */
int _printf(const char *format, ...)
{
    va_list args;
    int count = 0;

    va_start(args, format);

    while (*format)
    {
        if (*format != '%')
        {
            write(1, format, 1);
            count++;
        }
        else
        {
            format++; // Move past '%'
            if (*format == '\0')
                break; // Handle malformed format strings

            if (*format == 'c')
            {
                char c = va_arg(args, int);
                write(1, &c, 1);
                count++;
            }
            else if (*format == 's')
            {
                char *str = va_arg(args, char *);
                if (str == NULL)
                    str = "(null)";
                while (*str)
                {
                    write(1, str, 1);
                    str++;
                    count++;
                }
            }
            else if (*format == '%')
            {
                write(1, "%", 1);
                count++;
            }
            else if (*format == 'd' || *format == 'i')
            {
                int num = va_arg(args, int);
                if (num < 0)
                {
                    write(1, "-", 1);
                    count++;
                    num = -num;
                }
           
                int temp = num;
                int num_length = 0;
                while (temp)
                {
                    temp /= 10;
                    num_length++;
                }
                char buffer[12]; 
                for (int i = num_length - 1; i >= 0; i--)
                {
                    buffer[i] = (num % 10) + '0';
                    num /= 10;
                }
                buffer[num_length] = '\0';
                write(1, buffer, num_length);
                count += num_length;
            }
            else
            {
                write(1, "%", 1); 
                write(1, format, 1);
                count += 2;
            }
        }
        format++;
    }

    va_end(args);
    return count;
}
